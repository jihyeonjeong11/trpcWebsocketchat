// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output = "../node_modules/.prisma/client"
  //previewFeatures = ["interactiveTransactions"] // new version has this feature.
}

datasource db {
  provider = "postgresql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Theme {
  light
  dark
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  username String?
  theme Theme @default(light)

  messages Message[]
  conversations ConversationUser[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Conversation {
  id String @id @default(cuid())
  lastMessageId String?
  createdAt DateTime @default(now()) @db.Timestamptz()
  title String?

  messages Message[]
  lastMessage Message? @relation("lastMessage", fields: [lastMessageId], references: [id])
  conversationUsers ConversationUser[]
  
  @@unique([lastMessageId])
  @@index([lastMessageId])
}

model Message {
  id String @id @default(cuid())
  messageText String
  userId String
  conversationId String
  createdAt DateTime @default(now()) @db.Timestamptz()
  
  user User @relation(fields: [userId], references: [id])
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  lastMessageOfConversation Conversation? @relation("lastMessage")

  @@index([conversationId])

}

model ConversationUser {
  userId String
  conversationId String
  createdAt DateTime @default(now()) @db.Timestamptz()
  //lastRead DateTime?
  
  user User @relation(fields: [userId], references: [id])
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@unique([userId, conversationId])
  @@index([conversationId])
}

// advanced: group messaging // check commented fields.
