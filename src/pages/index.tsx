import type { NextPage } from 'next';
import Head from 'next/head';
import { signIn, signOut, useSession } from 'next-auth/react';
import { trpc } from '../utils/trpc';
import useOnChange from '../hooks/useOnChange';
import { useEffect } from 'react';
import Navbar from '../components/NavBar/NavBar';

interface InputWLabelsProps {
  name: string;
  value: string;
  onChange: (event: React.ChangeEvent<HTMLInputElement>) => void;
}

const InputWLabels = ({ name, value, onChange }: InputWLabelsProps) => {
  return (
    <div className="flex flex-col space-y-2">
      <label htmlFor={name}>Change {name}</label>
      <input
        name={name}
        id={name}
        placeholder={name}
        onChange={onChange}
        value={value}
        className="h-10 w-full rounded-lg bg-level2 px-3 py-2 outline-none placeholder:text-quaternaryText"
      />
    </div>
  );
};
const Home: NextPage = () => {
  const hello = trpc.chat.hello.useQuery({ text: 'from tRPC' });
  const {
    values: { name, username, image },
    setValues,
    handleChange,
  } = useOnChange({ name: '', username: '', image: '' });

  const changeUserDataMutation = trpc.user.changeUserData.useMutation();
  const { data: sessionData } = useSession();
  const changeUserData = () => {
    changeUserDataMutation.mutate({
      name: name || undefined,
      username: username || undefined,
      image: image || undefined,
    });
  };

  useEffect(() => {
    if (sessionData?.user) {
      setValues({
        name: sessionData.user.name || '',
        username: sessionData.user.username || '',
        image: sessionData.user.image || '',
      });
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [sessionData]);

  return (
    <>
      <Head>
        <title>t3Chat</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Navbar />
      <main className="container mx-auto flex min-h-screen flex-col items-center justify-center p-4">
        <div className="flex w-full items-center justify-center pt-6 text-2xl text-blue-500">
          {hello.data ? <p>{hello.data.greeting}</p> : <p>Loading..</p>}
        </div>
        <form
          className="flex flex-col space-y-5 rounded-xl bg-level1 p-8 shadow-sm"
          onSubmit={changeUserData}
        >
          {sessionData?.user?.image && (
            <img
              src={sessionData.user.image}
              alt="profile image"
              className="mx-auto h-11 w-11 rounded-full"
            />
          )}
          <InputWLabels
            name="name"
            value={name ? name : ''}
            onChange={handleChange}
          />
          <InputWLabels
            name="username"
            value={username ? username : ''}
            onChange={handleChange}
          />
          <InputWLabels
            name="image"
            value={image ?? ''}
            onChange={handleChange}
          />
          <button
            type="submit"
            className="h-9 w-full rounded-lg bg-primaryText text-invertedPrimaryText"
          >
            Submit
          </button>
        </form>
        <AuthShowcase />
      </main>
    </>
  );
};

export default Home;

const AuthShowcase: React.FC = () => {
  const { data: secretMessage } = trpc.user.getSecretMessage.useQuery();

  const { data: sessionData } = useSession();

  return (
    <div className="flex flex-col items-center justify-center gap-2">
      {sessionData && (
        <p className="text-2xl text-blue-500">
          Logged in as {sessionData?.user?.name}
        </p>
      )}
      {secretMessage && (
        <p className="text-2xl text-blue-500">{secretMessage}</p>
      )}
      <button
        className="rounded-md border border-black bg-violet-50 px-4 py-2 text-xl shadow-lg hover:bg-violet-100"
        onClick={sessionData ? () => signOut() : () => signIn()}
      >
        {sessionData ? 'Sign out' : 'Sign in'}
      </button>
    </div>
  );
};
