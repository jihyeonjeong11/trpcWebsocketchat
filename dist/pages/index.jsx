"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const head_1 = __importDefault(require("next/head"));
const react_1 = require("next-auth/react");
const trpc_1 = require("../utils/trpc");
const useOnChange_1 = __importDefault(require("../hooks/useOnChange"));
const react_2 = require("react");
const NavBar_1 = __importDefault(require("../components/NavBar/NavBar"));
const InputWLabels = ({ name, value, onChange }) => {
    return (<div className="flex flex-col space-y-2">
      <label htmlFor={name}>Change {name}</label>
      <input name={name} id={name} placeholder={name} onChange={onChange} value={value} className="h-10 w-full rounded-lg bg-level2 px-3 py-2 outline-none placeholder:text-quaternaryText"/>
    </div>);
};
const Home = () => {
    var _a;
    const hello = trpc_1.trpc.chat.hello.useQuery({ text: 'from tRPC' });
    const { values: { name, username, image }, setValues, handleChange, } = (0, useOnChange_1.default)({ name: '', username: '', image: '' });
    const changeUserDataMutation = trpc_1.trpc.user.changeUserData.useMutation();
    const { data: sessionData } = (0, react_1.useSession)();
    const changeUserData = () => {
        changeUserDataMutation.mutate({
            name: name || undefined,
            username: username || undefined,
            image: image || undefined,
        });
    };
    (0, react_2.useEffect)(() => {
        if (sessionData === null || sessionData === void 0 ? void 0 : sessionData.user) {
            setValues({
                name: sessionData.user.name || '',
                username: sessionData.user.username || '',
                image: sessionData.user.image || '',
            });
        }
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [sessionData]);
    return (<>
      <head_1.default>
        <title>t3Chat</title>
        <meta name="description" content="Generated by create-t3-app"/>
        <link rel="icon" href="/favicon.ico"/>
      </head_1.default>
      <NavBar_1.default />
      <main className="container mx-auto flex min-h-screen flex-col items-center justify-center p-4">
        <div className="flex w-full items-center justify-center pt-6 text-2xl text-blue-500">
          {hello.data ? <p>{hello.data.greeting}</p> : <p>Loading..</p>}
        </div>
        <form className="flex flex-col space-y-5 rounded-xl bg-level1 p-8 shadow-sm" onSubmit={changeUserData}>
          {((_a = sessionData === null || sessionData === void 0 ? void 0 : sessionData.user) === null || _a === void 0 ? void 0 : _a.image) && (<img src={sessionData.user.image} alt="profile image" className="mx-auto h-11 w-11 rounded-full"/>)}
          <InputWLabels name="name" value={name ? name : ''} onChange={handleChange}/>
          <InputWLabels name="username" value={username ? username : ''} onChange={handleChange}/>
          <InputWLabels name="image" value={image !== null && image !== void 0 ? image : ''} onChange={handleChange}/>
          <button type="submit" className="h-9 w-full rounded-lg bg-primaryText text-invertedPrimaryText">
            Submit
          </button>
        </form>
        <AuthShowcase />
      </main>
    </>);
};
exports.default = Home;
const AuthShowcase = () => {
    var _a;
    const { data: secretMessage } = trpc_1.trpc.user.getSecretMessage.useQuery();
    const { data: sessionData } = (0, react_1.useSession)();
    return (<div className="flex flex-col items-center justify-center gap-2">
      {sessionData && (<p className="text-2xl text-blue-500">
          Logged in as {(_a = sessionData === null || sessionData === void 0 ? void 0 : sessionData.user) === null || _a === void 0 ? void 0 : _a.name}
        </p>)}
      {secretMessage && (<p className="text-2xl text-blue-500">{secretMessage}</p>)}
      <button className="rounded-md border border-black bg-violet-50 px-4 py-2 text-xl shadow-lg hover:bg-violet-100" onClick={sessionData ? () => (0, react_1.signOut)() : () => (0, react_1.signIn)()}>
        {sessionData ? 'Sign out' : 'Sign in'}
      </button>
    </div>);
};
